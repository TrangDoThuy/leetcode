/*Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
*/
class MinStack {
    private:
    stack<int> normalstk ;
    stack<int> minstk ;
public:
    /** initialize your data structure here. */
    
    MinStack() {
        
    }
    
    void push(int x) {
        if(minstk.size()==0||x<=minstk.top())
            minstk.push(x);
        normalstk.push(x);
    }
    
    void pop() {
        if(normalstk.size()==0)
            return;
        int num = normalstk.top();
        normalstk.pop();
        if(num==minstk.top()){
            minstk.pop();
        }
    }
    
    int top() {
        if (normalstk.size()==0)
            return -1;
        return normalstk.top();
    }
    
    int getMin() {
        if (minstk.size()==0)
            return -1;
        return (minstk.top());
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
