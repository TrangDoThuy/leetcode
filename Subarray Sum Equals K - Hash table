/*
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:
Input:nums = [1,1,1], k = 2
Output: 2
Note:
The length of the array is in range [1, 20,000].
The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
*/
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        if(n==0)
            return 0;
        unordered_map<int,int> mymap; // key = prefixSUM, value = count of prefixSUM
        int currSUM = 0;
        int i =0;
        int count = 0;
        while(i<n){
            currSUM+=nums[i]; // add current element to sum so far
            if(currSUM==k)
                count+=1;
            //currSUM exceeds given k by currSUM - k, find a number of subarray that             //its currsum = currSUM - k
            if(mymap.find(currSUM-k)!=mymap.end())
                count+=mymap[currSUM-k];
            mymap[currSUM]+=1;
            i+=1;
        }
        return count;
    }
};
