/*Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
*/
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int rows = grid.size();
        if(rows==0)
            return 0;
        int cols = grid[0].size();
        vector<vector<int>> dp(rows,vector<int>(cols,0));
        int i,j;
        
        dp[0][0]=grid[0][0];
        //first row
        for(int i=1;i<cols;++i){
            dp[0][i]=dp[0][i-1]+grid[0][i];
        }
        //first col
        for(int j=1;j<rows;++j)
            dp[j][0]=dp[j-1][0]+grid[j][0];
        for(int i=1;i<cols;++i){
            for(int j=1;j<rows;++j){
                dp[j][i]=grid[j][i]+min(dp[j-1][i],dp[j][i-1]);
            }
        }
        return dp[rows-1][cols-1];
    }
};
