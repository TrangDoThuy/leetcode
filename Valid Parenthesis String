/*Given a string containing only three types of characters: '(', ')' and '*', 
write a function to check whether this string is valid. We define the validity of a string by these rules:

Any left parenthesis '(' must have a corresponding right parenthesis ')'.
Any right parenthesis ')' must have a corresponding left parenthesis '('.
Left parenthesis '(' must go before the corresponding right parenthesis ')'.
'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
An empty string is also valid.
*/
class Solution {
public:
    bool checkValidString(string s) {
        stack<int> open,star; //stacks keep the position of * and (
        int length = s.size();
        for(int i=0;i<length;++i){
            if(s[i]=='(')
                open.push(i);
            else if(s[i]=='*')
                star.push(i);
            else{
                if (!open.empty())
                    open.pop();
                else if (!star.empty())
                    star.pop();
                else
                    return false;
            }
        }
        while(!open.empty()){
            if(star.empty())
                return false;
            if(open.top()<star.top()){ // if * is before ( it is invalid
                open.pop();
                star.pop();
            }
            else
                return false;
        }
        return true;
    }
};
