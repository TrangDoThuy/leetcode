/*
You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]:

direction can be 0 (for left shift) or 1 (for right shift). 
amount is the amount by which string s is to be shifted.
A left shift by 1 means remove the first character of s and append it to the end.
Similarly, a right shift by 1 means remove the last character of s and add it to the beginning.
Return the final string after all operations.
*/
class Solution {
public:
    
    string stringShift(string s, vector<vector<int>>& shift) {
        int n = s.length();
        int step =0;
        for (int i=0;i<shift.size();++i){
            step+= shift[i][0]==0?-shift[i][1]:shift[i][1];
        }
        step%=n;
        string result="";
        if(step>0)// right rotation
            result = s.substr(n-step,step)+s.substr(0,n-step);
        else//left rotation
            result = s.substr(-step,n+step)+s.substr(0,-step);
        return result;
        
    }
};
